<template>
  <div>
    <task>
      <div class="demo-section">
        <ui-form formModel="{=formModel=}" san-ref="formModel">
          <ui-form-item rules="{{ruleMobile}}" prop="mobile" helpText="请输入手机号码" label="手机号码">
            <ui-input value="{=formModel.mobile=}"></ui-input>
          </ui-form-item>
          <ui-form-item rules="{{ruleAddress}}" prop="address" helpText="请输入地址" label="地址">
            <ui-input value="{=formModel.address=}"></ui-input>
          </ui-form-item>
          <ui-form-item prop="userName" require="{{true}}" helpText="输入姓名与身份证保持一致" label="姓名">
            <ui-input value="{=formModel.userName=}"></ui-input>
          </ui-form-item>
          <ui-form-item
            rules="{{ruleIdCard}}"
            prop="idCard"
            helpText="根据国家相关规定，需要您输入身份证号码"
            label="身份证号码"
          >
            <ui-input value="{=formModel.idCard=}"></ui-input>
          </ui-form-item>
          <ui-form-item>
            <ui-button
              class="submit-button"
              on-click="submitForm('formModel')"
              ui="primary small"
            >提交</ui-button>
            <ui-button class="submit-button" on-click="resetForm('formModel')" ui="primary small">重置</ui-button>
          </ui-form-item>
        </ui-form>
      </div>
    </task>
  </div>
</template>

<script>
import { Task, Form, FormItem, Input, Button } from "../../ui";

export default {
  components: {
    task: Task,
    "ui-button": Button,
    "ui-form": Form,
    "ui-form-item": FormItem,
    "ui-input": Input
  },
  initData() {
    const idCardValidate = (rule, value, callback) => {
      if (!value) {
        setTimeout(function() {
          callback(["请输入身份证号码"]);
        }, 1000);
      } else {
        setTimeout(function() {
          callback([]);
        }, 1000);
      }
    };

    return {
      formModel: {
        mobile: "",
        userName: "",
        idCard: "",
        address: ""
      },
      ruleMobile: [
        {
          type: "string",
          required: true,
          message: "请输入手机号码"
        },
        {
          validator(rule, value, callback) {
            if (value) {
              if (!/^[1][3,4,5,7,8][0-9]{9}$/.test(value)) {
                callback([new Error("请输入正确的手机号码!")]);
              } else {
                callback([]);
              }
            } else {
              callback([new Error("请输入手机号码!")]);
            }
          }
        }
      ],
      ruleAddress: [
        {
          required: true,
          message: "必选",
          type: "string"
        },
        {
          min: 6,
          message: "地址需不少于6个字符"
        },
        {
          max: 20,
          message: "地址需不超过20个字符"
        }
      ],
      ruleIdCard: [
        {
          type: "string",
          require: true
        },
        {
          validator: idCardValidate
        }
      ]
    };
  },
  submitForm(formName) {
    let formModel = this.data.get(formName);
    if (formName === "formModel") {
      this.data.set("formStatus", "validating");
    }
    this.ref(formName).validate(valid => {
      this.data.set("formStatus", "validateEnd");
      if (valid) {
        // 验证成功 do someThing
        console.log(formModel);
      } else {
        // 验证失败 do someThing
        console.log(valid);
      }
    });
  },
  resetForm(formName) {
    this.ref(formName).resetFields();
  }
};
</script>
